{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport axios from 'axios';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { API_URL } from \"../constants/config\";\nexport var api = axios.create({\n  baseURL: API_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\napi.interceptors.request.use(function () {\n  var _ref = _asyncToGenerator(function* (config) {\n    var token = yield AsyncStorage.getItem('@auth_token');\n    if (token) {\n      config.headers.Authorization = \"Bearer \" + token;\n    }\n    return config;\n  });\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}(), function (error) {\n  Promise.reject(error);\n});\napi.interceptors.response.use(function (response) {\n  return response;\n}, function () {\n  var _ref2 = _asyncToGenerator(function* (error) {\n    var originalRequest = error.config;\n    if (error.response && error.response.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n      try {\n        var refreshToken = yield AsyncStorage.getItem('@refresh_token');\n        if (!refreshToken) {\n          return Promise.reject(error);\n        }\n        var response = yield axios.post(API_URL + \"/auth/refresh\", {\n          refresh_token: refreshToken\n        });\n        if (response.data.token) {\n          yield AsyncStorage.setItem('@auth_token', response.data.token);\n          originalRequest.headers.Authorization = \"Bearer \" + response.data.token;\n          return axios(originalRequest);\n        }\n      } catch (refreshError) {\n        yield AsyncStorage.removeItem('@auth_token');\n        yield AsyncStorage.removeItem('@refresh_token');\n      }\n    }\n    return Promise.reject(error);\n  });\n  return function (_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}());\nvar apiService = {\n  auth: {\n    login: function login(credentials) {\n      return api.post('/auth/login', credentials);\n    },\n    register: function register(userData) {\n      return api.post('/auth/register', userData);\n    },\n    verify: function verify() {\n      return api.get('/auth/verify');\n    },\n    refreshToken: function refreshToken(_refreshToken) {\n      return api.post('/auth/refresh', {\n        refresh_token: _refreshToken\n      });\n    },\n    resetPassword: function resetPassword(email) {\n      return api.post('/auth/reset-password', {\n        email: email\n      });\n    },\n    verifyCode: function verifyCode(phone, code) {\n      return api.post('/auth/verify-code', {\n        phone: phone,\n        code: code\n      });\n    }\n  },\n  user: {\n    getProfile: function getProfile() {\n      return api.get('/profile');\n    },\n    updateProfile: function updateProfile(userData) {\n      return api.put('/profile', userData);\n    },\n    uploadProfileImage: function uploadProfileImage(formData) {\n      return api.post('/profile/image', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n    }\n  },\n  diseases: {\n    detect: function detect(formData) {\n      return api.post('/diseases/detect', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n    },\n    getHistory: function getHistory(params) {\n      return api.get('/diseases/history', {\n        params: params\n      });\n    },\n    getDetails: function getDetails(id) {\n      return api.get(\"/diseases/\" + id);\n    },\n    deleteDetection: function deleteDetection(id) {\n      return api.delete(\"/diseases/\" + id);\n    }\n  },\n  advisory: {\n    getCategories: function getCategories() {\n      return api.get('/advisory/categories');\n    },\n    getContent: function getContent(categoryId, params) {\n      return api.get(\"/advisory/categories/\" + categoryId, {\n        params: params\n      });\n    },\n    search: function search(query) {\n      return api.get('/advisory/search', {\n        params: {\n          query: query\n        }\n      });\n    },\n    getFeatured: function getFeatured() {\n      return api.get('/advisory/featured');\n    },\n    getRecent: function getRecent() {\n      return api.get('/advisory/recent');\n    },\n    getSaved: function getSaved() {\n      return api.get('/advisory/saved');\n    },\n    toggleSave: function toggleSave(contentId) {\n      return api.post(\"/advisory/\" + contentId + \"/save\");\n    },\n    askQuestion: function askQuestion(question) {\n      return api.post('/advisory/ask', {\n        question: question\n      });\n    }\n  },\n  groups: {\n    getMyGroups: function getMyGroups() {\n      return api.get('/groups/mine');\n    },\n    discover: function discover(params) {\n      return api.get('/groups/discover', {\n        params: params\n      });\n    },\n    create: function create(groupData) {\n      return api.post('/groups', groupData);\n    },\n    getDetails: function getDetails(groupId) {\n      return api.get(\"/groups/\" + groupId);\n    },\n    join: function join(groupCode) {\n      return api.post('/groups/join', {\n        code: groupCode\n      });\n    },\n    leave: function leave(groupId) {\n      return api.post(\"/groups/\" + groupId + \"/leave\");\n    },\n    getMembers: function getMembers(groupId) {\n      return api.get(\"/groups/\" + groupId + \"/members\");\n    },\n    getMessages: function getMessages(groupId, params) {\n      return api.get(\"/groups/\" + groupId + \"/messages\", {\n        params: params\n      });\n    },\n    sendMessage: function sendMessage(groupId, message) {\n      return api.post(\"/groups/\" + groupId + \"/messages\", message);\n    }\n  }\n};\nexport default apiService;","map":{"version":3,"names":["axios","AsyncStorage","API_URL","api","create","baseURL","timeout","headers","interceptors","request","use","_ref","_asyncToGenerator","config","token","getItem","Authorization","_x","apply","arguments","error","Promise","reject","response","_ref2","originalRequest","status","_retry","refreshToken","post","refresh_token","data","setItem","refreshError","removeItem","_x2","apiService","auth","login","credentials","register","userData","verify","get","resetPassword","email","verifyCode","phone","code","user","getProfile","updateProfile","put","uploadProfileImage","formData","diseases","detect","getHistory","params","getDetails","id","deleteDetection","delete","advisory","getCategories","getContent","categoryId","search","query","getFeatured","getRecent","getSaved","toggleSave","contentId","askQuestion","question","groups","getMyGroups","discover","groupData","groupId","join","groupCode","leave","getMembers","getMessages","sendMessage","message"],"sources":["C:/Users/eacha/OneDrive/Desktop/SMART FARMER/FRONTEND/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { API_URL } from '../constants/config';\r\n\r\n// Create axios instance with default config\r\nexport const api = axios.create({\r\n  baseURL: API_URL,\r\n  timeout: 30000, // 30 second timeout\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor for API calls\r\napi.interceptors.request.use(\r\n  async (config) => {\r\n    // Get auth token from storage\r\n    const token = await AsyncStorage.getItem('@auth_token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor for API calls\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n    \r\n    // Handle 401 (Unauthorized) - Token expired\r\n    if (error.response && error.response.status === 401 && !originalRequest._retry) {\r\n      originalRequest._retry = true;\r\n      \r\n      try {\r\n        // Try to refresh token\r\n        const refreshToken = await AsyncStorage.getItem('@refresh_token');\r\n        if (!refreshToken) {\r\n          // No refresh token, user needs to log in again\r\n          return Promise.reject(error);\r\n        }\r\n        \r\n        const response = await axios.post(`${API_URL}/auth/refresh`, {\r\n          refresh_token: refreshToken,\r\n        });\r\n        \r\n        if (response.data.token) {\r\n          await AsyncStorage.setItem('@auth_token', response.data.token);\r\n          \r\n          // Retry the original request with new token\r\n          originalRequest.headers.Authorization = `Bearer ${response.data.token}`;\r\n          return axios(originalRequest);\r\n        }\r\n      } catch (refreshError) {\r\n        // Refresh failed, user needs to log in again\r\n        await AsyncStorage.removeItem('@auth_token');\r\n        await AsyncStorage.removeItem('@refresh_token');\r\n        // You could dispatch an action to redirect to login here\r\n      }\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// API service methods\r\nconst apiService = {\r\n  // Auth endpoints\r\n  auth: {\r\n    login: (credentials) => api.post('/auth/login', credentials),\r\n    register: (userData) => api.post('/auth/register', userData),\r\n    verify: () => api.get('/auth/verify'),\r\n    refreshToken: (refreshToken) => api.post('/auth/refresh', { refresh_token: refreshToken }),\r\n    resetPassword: (email) => api.post('/auth/reset-password', { email }),\r\n    verifyCode: (phone, code) => api.post('/auth/verify-code', { phone, code }),\r\n  },\r\n  \r\n  // User profile endpoints\r\n  user: {\r\n    getProfile: () => api.get('/profile'),\r\n    updateProfile: (userData) => api.put('/profile', userData),\r\n    uploadProfileImage: (formData) => api.post('/profile/image', formData, {\r\n      headers: { 'Content-Type': 'multipart/form-data' },\r\n    }),\r\n  },\r\n  \r\n  // Disease detection endpoints\r\n  diseases: {\r\n    detect: (formData) => api.post('/diseases/detect', formData, {\r\n      headers: { 'Content-Type': 'multipart/form-data' },\r\n    }),\r\n    getHistory: (params) => api.get('/diseases/history', { params }),\r\n    getDetails: (id) => api.get(`/diseases/${id}`),\r\n    deleteDetection: (id) => api.delete(`/diseases/${id}`),\r\n  },\r\n  \r\n  // Advisory endpoints\r\n  advisory: {\r\n    getCategories: () => api.get('/advisory/categories'),\r\n    getContent: (categoryId, params) => api.get(`/advisory/categories/${categoryId}`, { params }),\r\n    search: (query) => api.get('/advisory/search', { params: { query } }),\r\n    getFeatured: () => api.get('/advisory/featured'),\r\n    getRecent: () => api.get('/advisory/recent'),\r\n    getSaved: () => api.get('/advisory/saved'),\r\n    toggleSave: (contentId) => api.post(`/advisory/${contentId}/save`),\r\n    askQuestion: (question) => api.post('/advisory/ask', { question }),\r\n  },\r\n  \r\n  // Groups endpoints\r\n  groups: {\r\n    getMyGroups: () => api.get('/groups/mine'),\r\n    discover: (params) => api.get('/groups/discover', { params }),\r\n    create: (groupData) => api.post('/groups', groupData),\r\n    getDetails: (groupId) => api.get(`/groups/${groupId}`),\r\n    join: (groupCode) => api.post('/groups/join', { code: groupCode }),\r\n    leave: (groupId) => api.post(`/groups/${groupId}/leave`),\r\n    getMembers: (groupId) => api.get(`/groups/${groupId}/members`),\r\n    getMessages: (groupId, params) => api.get(`/groups/${groupId}/messages`, { params }),\r\n    sendMessage: (groupId, message) => api.post(`/groups/${groupId}/messages`, message),\r\n  },\r\n};\r\n\r\nexport default apiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}