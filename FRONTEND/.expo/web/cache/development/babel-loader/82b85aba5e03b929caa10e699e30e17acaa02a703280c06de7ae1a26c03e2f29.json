{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport NetInfo from '@react-native-community/netinfo';\nimport AppState from \"react-native-web/dist/exports/AppState\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar NetworkContext = createContext({\n  isConnected: true,\n  isInternetReachable: true,\n  connectionType: null,\n  connectionQuality: 'unknown',\n  lastChecked: null,\n  checkConnection: function checkConnection() {}\n});\nexport var useNetwork = function useNetwork() {\n  return useContext(NetworkContext);\n};\nexport var NetworkProvider = function NetworkProvider(_ref) {\n  var children = _ref.children;\n  var _useState = useState({\n      isConnected: true,\n      isInternetReachable: true,\n      connectionType: null,\n      connectionQuality: 'unknown',\n      lastChecked: Date.now()\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    networkState = _useState2[0],\n    setNetworkState = _useState2[1];\n  var determineConnectionQuality = function determineConnectionQuality(type, isInternetReachable) {\n    if (!isInternetReachable) return 'poor';\n    switch (type) {\n      case 'none':\n        return 'poor';\n      case 'cellular':\n        return 'fair';\n      case 'wifi':\n        return 'excellent';\n      case 'ethernet':\n        return 'excellent';\n      default:\n        return 'unknown';\n    }\n  };\n  var checkConnection = useCallback(_asyncToGenerator(function* () {\n    try {\n      var networkInfo = yield NetInfo.fetch();\n      var quality = determineConnectionQuality(networkInfo.type, networkInfo.isInternetReachable);\n      setNetworkState({\n        isConnected: networkInfo.isConnected,\n        isInternetReachable: networkInfo.isInternetReachable,\n        connectionType: networkInfo.type,\n        connectionQuality: quality,\n        lastChecked: Date.now()\n      });\n      return networkInfo.isConnected && networkInfo.isInternetReachable;\n    } catch (error) {\n      console.error('Error checking network connection:', error);\n      return false;\n    }\n  }), []);\n  useEffect(function () {\n    checkConnection();\n    var unsubscribe = NetInfo.addEventListener(function (state) {\n      var quality = determineConnectionQuality(state.type, state.isInternetReachable);\n      setNetworkState({\n        isConnected: state.isConnected,\n        isInternetReachable: state.isInternetReachable,\n        connectionType: state.type,\n        connectionQuality: quality,\n        lastChecked: Date.now()\n      });\n    });\n    var handleAppStateChange = function handleAppStateChange(nextAppState) {\n      if (nextAppState === 'active') {\n        checkConnection();\n      }\n    };\n    var appStateSubscription = AppState.addEventListener('change', handleAppStateChange);\n    return function () {\n      unsubscribe();\n      appStateSubscription.remove();\n    };\n  }, [checkConnection]);\n  return _jsx(NetworkContext.Provider, {\n    value: _objectSpread(_objectSpread({}, networkState), {}, {\n      checkConnection: checkConnection\n    }),\n    children: children\n  });\n};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","NetInfo","AppState","jsx","_jsx","NetworkContext","isConnected","isInternetReachable","connectionType","connectionQuality","lastChecked","checkConnection","useNetwork","NetworkProvider","_ref","children","_useState","Date","now","_useState2","_slicedToArray","networkState","setNetworkState","determineConnectionQuality","type","_asyncToGenerator","networkInfo","fetch","quality","error","console","unsubscribe","addEventListener","state","handleAppStateChange","nextAppState","appStateSubscription","remove","Provider","value","_objectSpread"],"sources":["C:/Users/eacha/OneDrive/Desktop/SMART FARMER/FRONTEND/src/contexts/NetworkContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\r\nimport NetInfo from '@react-native-community/netinfo';\r\nimport { AppState } from 'react-native';\r\n\r\nconst NetworkContext = createContext({\r\n  isConnected: true,\r\n  isInternetReachable: true,\r\n  connectionType: null,\r\n  connectionQuality: 'unknown',\r\n  lastChecked: null,\r\n  checkConnection: () => {},\r\n});\r\n\r\nexport const useNetwork = () => useContext(NetworkContext);\r\n\r\nexport const NetworkProvider = ({ children }) => {\r\n  const [networkState, setNetworkState] = useState({\r\n    isConnected: true,\r\n    isInternetReachable: true,\r\n    connectionType: null,\r\n    connectionQuality: 'unknown', // 'poor', 'fair', 'good', 'excellent', or 'unknown'\r\n    lastChecked: Date.now(),\r\n  });\r\n\r\n  // Determine connection quality based on network type\r\n  const determineConnectionQuality = (type, isInternetReachable) => {\r\n    if (!isInternetReachable) return 'poor';\r\n    \r\n    switch (type) {\r\n      case 'none':\r\n        return 'poor';\r\n      case 'cellular':\r\n        return 'fair';\r\n      case 'wifi':\r\n        return 'excellent';\r\n      case 'ethernet':\r\n        return 'excellent';\r\n      default:\r\n        return 'unknown';\r\n    }\r\n  };\r\n\r\n  const checkConnection = useCallback(async () => {\r\n    try {\r\n      const networkInfo = await NetInfo.fetch();\r\n      \r\n      const quality = determineConnectionQuality(\r\n        networkInfo.type,\r\n        networkInfo.isInternetReachable\r\n      );\r\n      \r\n      setNetworkState({\r\n        isConnected: networkInfo.isConnected,\r\n        isInternetReachable: networkInfo.isInternetReachable,\r\n        connectionType: networkInfo.type,\r\n        connectionQuality: quality,\r\n        lastChecked: Date.now(),\r\n      });\r\n      \r\n      return networkInfo.isConnected && networkInfo.isInternetReachable;\r\n    } catch (error) {\r\n      console.error('Error checking network connection:', error);\r\n      return false;\r\n    }\r\n  }, []);\r\n\r\n  // Monitor network changes\r\n  useEffect(() => {\r\n    // Initial check\r\n    checkConnection();\r\n\r\n    // Subscribe to network info changes\r\n    const unsubscribe = NetInfo.addEventListener(state => {\r\n      const quality = determineConnectionQuality(\r\n        state.type, \r\n        state.isInternetReachable\r\n      );\r\n      \r\n      setNetworkState({\r\n        isConnected: state.isConnected,\r\n        isInternetReachable: state.isInternetReachable,\r\n        connectionType: state.type,\r\n        connectionQuality: quality,\r\n        lastChecked: Date.now(),\r\n      });\r\n    });\r\n\r\n    // Check connection when app comes to foreground\r\n    const handleAppStateChange = (nextAppState) => {\r\n      if (nextAppState === 'active') {\r\n        checkConnection();\r\n      }\r\n    };\r\n\r\n    const appStateSubscription = AppState.addEventListener('change', handleAppStateChange);\r\n\r\n    // Cleanup\r\n    return () => {\r\n      unsubscribe();\r\n      appStateSubscription.remove();\r\n    };\r\n  }, [checkConnection]);\r\n\r\n  return (\r\n    <NetworkContext.Provider\r\n      value={{\r\n        ...networkState,\r\n        checkConnection,\r\n      }}\r\n    >\r\n      {children}\r\n    </NetworkContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}