{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport * as SQLite from 'expo-sqlite';\nimport * as FileSystem from 'expo-file-system';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { setupDatabase } from \"../db/setup\";\nimport { migrationManager } from \"../db/migrations\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar DatabaseContext = createContext({\n  db: null,\n  isDbReady: false,\n  executeQuery: function () {\n    var _executeQuery = _asyncToGenerator(function* () {});\n    function executeQuery() {\n      return _executeQuery.apply(this, arguments);\n    }\n    return executeQuery;\n  }(),\n  executeBatch: function () {\n    var _executeBatch = _asyncToGenerator(function* () {});\n    function executeBatch() {\n      return _executeBatch.apply(this, arguments);\n    }\n    return executeBatch;\n  }(),\n  transaction: function () {\n    var _transaction = _asyncToGenerator(function* () {});\n    function transaction() {\n      return _transaction.apply(this, arguments);\n    }\n    return transaction;\n  }(),\n  resetDatabase: function () {\n    var _resetDatabase = _asyncToGenerator(function* () {});\n    function resetDatabase() {\n      return _resetDatabase.apply(this, arguments);\n    }\n    return resetDatabase;\n  }(),\n  getDbInfo: function getDbInfo() {\n    return {};\n  }\n});\nexport var useDatabase = function useDatabase() {\n  return useContext(DatabaseContext);\n};\nexport var DatabaseProvider = function DatabaseProvider(_ref) {\n  var children = _ref.children;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    db = _useState2[0],\n    setDb = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isDbReady = _useState4[0],\n    setIsDbReady = _useState4[1];\n  var openDatabase = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      if (Platform.OS === 'web') {\n        console.warn('SQLite is not available on web platform');\n        return null;\n      }\n      if (Platform.OS === 'ios') {\n        var directory = FileSystem.documentDirectory + 'SQLite';\n        var dirInfo = yield FileSystem.getInfoAsync(directory);\n        if (!dirInfo.exists) {\n          yield FileSystem.makeDirectoryAsync(directory, {\n            intermediates: true\n          });\n        }\n      }\n      return SQLite.openDatabase('smartfarmer.db');\n    });\n    return function openDatabase() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  useEffect(function () {\n    var initializeDatabase = function () {\n      var _ref3 = _asyncToGenerator(function* () {\n        try {\n          var database = yield openDatabase();\n          if (!database) return;\n          setDb(database);\n          yield setupDatabase(database);\n          yield migrationManager.runMigrations(database);\n          setIsDbReady(true);\n          console.log('Database initialized successfully');\n        } catch (error) {\n          console.error('Error initializing database:', error);\n        }\n      });\n      return function initializeDatabase() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n    initializeDatabase();\n  }, []);\n  var executeQuery = function () {\n    var _ref4 = _asyncToGenerator(function* (sql) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      return new Promise(function (resolve, reject) {\n        if (!db) {\n          reject(new Error('Database not initialized'));\n          return;\n        }\n        db.transaction(function (tx) {\n          tx.executeSql(sql, params, function (_, result) {\n            return resolve(result);\n          }, function (_, error) {\n            console.error('SQL Error:', error, 'Query:', sql, 'Params:', params);\n            reject(error);\n            return false;\n          });\n        });\n      });\n    });\n    return function executeQuery(_x) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  var executeBatch = function () {\n    var _ref5 = _asyncToGenerator(function* (queries) {\n      return new Promise(function (resolve, reject) {\n        if (!db) {\n          reject(new Error('Database not initialized'));\n          return;\n        }\n        db.transaction(function (tx) {\n          queries.forEach(function (_ref6) {\n            var sql = _ref6.sql,\n              _ref6$params = _ref6.params,\n              params = _ref6$params === void 0 ? [] : _ref6$params;\n            tx.executeSql(sql, params);\n          });\n        }, function (error) {\n          console.error('Batch transaction error:', error);\n          reject(error);\n        }, function () {\n          return resolve(true);\n        });\n      });\n    });\n    return function executeBatch(_x2) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n  var transaction = function () {\n    var _ref7 = _asyncToGenerator(function* (callback) {\n      return new Promise(function (resolve, reject) {\n        if (!db) {\n          reject(new Error('Database not initialized'));\n          return;\n        }\n        db.transaction(function (tx) {\n          return callback(tx);\n        }, function (error) {\n          console.error('Transaction error:', error);\n          reject(error);\n        }, function () {\n          return resolve(true);\n        });\n      });\n    });\n    return function transaction(_x3) {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n  var resetDatabase = function () {\n    var _ref8 = _asyncToGenerator(function* () {\n      if (!db) return false;\n      try {\n        var tables = yield executeQuery(\"SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%' AND name NOT LIKE 'android_%';\");\n        var dropQueries = Array.from({\n          length: tables.rows.length\n        }, function (_, i) {\n          return {\n            sql: \"DROP TABLE IF EXISTS \" + tables.rows.item(i).name + \";\"\n          };\n        });\n        yield executeBatch(dropQueries);\n        yield setupDatabase(db);\n        return true;\n      } catch (error) {\n        console.error('Error resetting database:', error);\n        return false;\n      }\n    });\n    return function resetDatabase() {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n  var getDbInfo = function getDbInfo() {\n    if (!db) return {\n      ready: false\n    };\n    return {\n      ready: isDbReady,\n      name: db.name,\n      version: db.version\n    };\n  };\n  return _jsx(DatabaseContext.Provider, {\n    value: {\n      db: db,\n      isDbReady: isDbReady,\n      executeQuery: executeQuery,\n      executeBatch: executeBatch,\n      transaction: transaction,\n      resetDatabase: resetDatabase,\n      getDbInfo: getDbInfo\n    },\n    children: children\n  });\n};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","SQLite","FileSystem","Platform","setupDatabase","migrationManager","jsx","_jsx","DatabaseContext","db","isDbReady","executeQuery","_executeQuery","_asyncToGenerator","apply","arguments","executeBatch","_executeBatch","transaction","_transaction","resetDatabase","_resetDatabase","getDbInfo","useDatabase","DatabaseProvider","_ref","children","_useState","_useState2","_slicedToArray","setDb","_useState3","_useState4","setIsDbReady","openDatabase","_ref2","OS","console","warn","directory","documentDirectory","dirInfo","getInfoAsync","exists","makeDirectoryAsync","intermediates","initializeDatabase","_ref3","database","runMigrations","log","error","_ref4","sql","params","length","undefined","Promise","resolve","reject","Error","tx","executeSql","_","result","_x","_ref5","queries","forEach","_ref6","_ref6$params","_x2","_ref7","callback","_x3","_ref8","tables","dropQueries","Array","from","rows","i","item","name","ready","version","Provider","value"],"sources":["C:/Users/eacha/OneDrive/Desktop/SMART FARMER/FRONTEND/src/contexts/DatabaseContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport * as SQLite from 'expo-sqlite';\r\nimport * as FileSystem from 'expo-file-system';\r\nimport { Platform } from 'react-native';\r\nimport { setupDatabase } from '../db/setup';\r\nimport { migrationManager } from '../db/migrations';\r\n\r\nconst DatabaseContext = createContext({\r\n  db: null,\r\n  isDbReady: false,\r\n  executeQuery: async () => {},\r\n  executeBatch: async () => {},\r\n  transaction: async () => {},\r\n  resetDatabase: async () => {},\r\n  getDbInfo: () => ({}),\r\n});\r\n\r\nexport const useDatabase = () => useContext(DatabaseContext);\r\n\r\nexport const DatabaseProvider = ({ children }) => {\r\n  const [db, setDb] = useState(null);\r\n  const [isDbReady, setIsDbReady] = useState(false);\r\n\r\n  // Function to open the database with proper directory handling for iOS\r\n  const openDatabase = async () => {\r\n    if (Platform.OS === 'web') {\r\n      // SQLite isn't supported on web\r\n      console.warn('SQLite is not available on web platform');\r\n      return null;\r\n    }\r\n\r\n    // Ensure directory exists for iOS\r\n    if (Platform.OS === 'ios') {\r\n      const directory = FileSystem.documentDirectory + 'SQLite';\r\n      const dirInfo = await FileSystem.getInfoAsync(directory);\r\n      if (!dirInfo.exists) {\r\n        await FileSystem.makeDirectoryAsync(directory, { intermediates: true });\r\n      }\r\n    }\r\n\r\n    // Open database\r\n    return SQLite.openDatabase('smartfarmer.db');\r\n  };\r\n\r\n  // Initialize database and run migrations on app start\r\n  useEffect(() => {\r\n    const initializeDatabase = async () => {\r\n      try {\r\n        // Open database\r\n        const database = await openDatabase();\r\n        if (!database) return;\r\n\r\n        setDb(database);\r\n\r\n        // Run initial setup to create tables\r\n        await setupDatabase(database);\r\n\r\n        // Check and run any necessary migrations\r\n        await migrationManager.runMigrations(database);\r\n\r\n        setIsDbReady(true);\r\n        console.log('Database initialized successfully');\r\n      } catch (error) {\r\n        console.error('Error initializing database:', error);\r\n      }\r\n    };\r\n\r\n    initializeDatabase();\r\n  }, []);\r\n\r\n  // Execute a single SQL query with optional parameters\r\n  const executeQuery = async (sql, params = []) => {\r\n    return new Promise((resolve, reject) => {\r\n      if (!db) {\r\n        reject(new Error('Database not initialized'));\r\n        return;\r\n      }\r\n\r\n      db.transaction(tx => {\r\n        tx.executeSql(\r\n          sql,\r\n          params,\r\n          (_, result) => resolve(result),\r\n          (_, error) => {\r\n            console.error('SQL Error:', error, 'Query:', sql, 'Params:', params);\r\n            reject(error);\r\n            return false;\r\n          }\r\n        );\r\n      });\r\n    });\r\n  };\r\n\r\n  // Execute multiple SQL queries in one transaction\r\n  const executeBatch = async (queries) => {\r\n    return new Promise((resolve, reject) => {\r\n      if (!db) {\r\n        reject(new Error('Database not initialized'));\r\n        return;\r\n      }\r\n\r\n      db.transaction(\r\n        tx => {\r\n          queries.forEach(({ sql, params = [] }) => {\r\n            tx.executeSql(sql, params);\r\n          });\r\n        },\r\n        error => {\r\n          console.error('Batch transaction error:', error);\r\n          reject(error);\r\n        },\r\n        () => resolve(true)\r\n      );\r\n    });\r\n  };\r\n\r\n  // Custom transaction function\r\n  const transaction = async (callback) => {\r\n    return new Promise((resolve, reject) => {\r\n      if (!db) {\r\n        reject(new Error('Database not initialized'));\r\n        return;\r\n      }\r\n\r\n      db.transaction(\r\n        tx => callback(tx),\r\n        error => {\r\n          console.error('Transaction error:', error);\r\n          reject(error);\r\n        },\r\n        () => resolve(true)\r\n      );\r\n    });\r\n  };\r\n\r\n  // Reset the database (for testing or serious issues)\r\n  const resetDatabase = async () => {\r\n    if (!db) return false;\r\n\r\n    try {\r\n      // Drop all tables\r\n      const tables = await executeQuery(\r\n        \"SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%' AND name NOT LIKE 'android_%';\"\r\n      );\r\n\r\n      const dropQueries = Array.from({ length: tables.rows.length }, (_, i) => ({\r\n        sql: `DROP TABLE IF EXISTS ${tables.rows.item(i).name};`,\r\n      }));\r\n\r\n      await executeBatch(dropQueries);\r\n\r\n      // Recreate database structure\r\n      await setupDatabase(db);\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error resetting database:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Get database info\r\n  const getDbInfo = () => {\r\n    if (!db) return { ready: false };\r\n\r\n    return {\r\n      ready: isDbReady,\r\n      name: db.name,\r\n      version: db.version,\r\n    };\r\n  };\r\n\r\n  return (\r\n    <DatabaseContext.Provider\r\n      value={{\r\n        db,\r\n        isDbReady,\r\n        executeQuery,\r\n        executeBatch,\r\n        transaction,\r\n        resetDatabase,\r\n        getDbInfo,\r\n      }}\r\n    >\r\n      {children}\r\n    </DatabaseContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}