{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nexport var setupDatabase = function () {\n  var _ref = _asyncToGenerator(function* (db) {\n    return new Promise(function (resolve, reject) {\n      db.transaction(function (tx) {\n        tx.executeSql(\"\\n          CREATE TABLE IF NOT EXISTS users (\\n            id TEXT PRIMARY KEY,\\n            name TEXT NOT NULL,\\n            email TEXT,\\n            phone TEXT,\\n            profile_image TEXT,\\n            role TEXT NOT NULL,\\n            last_sync INTEGER,\\n            created_at INTEGER NOT NULL,\\n            updated_at INTEGER NOT NULL\\n          );\\n        \");\n        tx.executeSql(\"\\n          CREATE TABLE IF NOT EXISTS disease_detections (\\n            id TEXT PRIMARY KEY,\\n            user_id TEXT NOT NULL,\\n            crop_name TEXT NOT NULL,\\n            image_path TEXT NOT NULL,\\n            description TEXT,\\n            confidence REAL,\\n            advice TEXT,\\n            treatment TEXT,\\n            prevention TEXT,\\n            location TEXT,\\n            sync_status TEXT DEFAULT 'pending',\\n            created_at INTEGER NOT NULL,\\n            updated_at INTEGER NOT NULL,\\n            FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE\\n          );\\n        \");\n        tx.executeSql(\"\\n          CREATE TABLE IF NOT EXISTS groups (\\n            id TEXT PRIMARY KEY,\\n            name TEXT NOT NULL,\\n            description TEXT,\\n            image_path TEXT,\\n            join_code TEXT,\\n            member_count INTEGER DEFAULT 0,\\n            created_by TEXT,\\n            is_public INTEGER DEFAULT 1,\\n            sync_status TEXT DEFAULT 'pending',\\n            created_at INTEGER NOT NULL,\\n            updated_at INTEGER NOT NULL,\\n            FOREIGN KEY (created_by) REFERENCES users (id) ON DELETE SET NULL\\n          );\\n        \");\n        tx.executeSql(\"\\n          CREATE TABLE IF NOT EXISTS group_members (\\n            id TEXT PRIMARY KEY,\\n            group_id TEXT NOT NULL,\\n            user_id TEXT NOT NULL,\\n            role TEXT DEFAULT 'member',\\n            joined_at INTEGER NOT NULL,\\n            sync_status TEXT DEFAULT 'pending',\\n            FOREIGN KEY (group_id) REFERENCES groups (id) ON DELETE CASCADE,\\n            FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,\\n            UNIQUE (group_id, user_id)\\n          );\\n        \");\n        tx.executeSql(\"\\n          CREATE TABLE IF NOT EXISTS messages (\\n            id TEXT PRIMARY KEY,\\n            group_id TEXT NOT NULL,\\n            user_id TEXT NOT NULL,\\n            content TEXT NOT NULL,\\n            has_attachment INTEGER DEFAULT 0,\\n            attachment_type TEXT,\\n            attachment_url TEXT,\\n            is_read INTEGER DEFAULT 0,\\n            sync_status TEXT DEFAULT 'pending',\\n            created_at INTEGER NOT NULL,\\n            updated_at INTEGER NOT NULL,\\n            FOREIGN KEY (group_id) REFERENCES groups (id) ON DELETE CASCADE,\\n            FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE\\n          );\\n        \");\n        tx.executeSql(\"\\n          CREATE TABLE IF NOT EXISTS advisory_content (\\n            id TEXT PRIMARY KEY,\\n            title TEXT NOT NULL,\\n            content TEXT NOT NULL,\\n            category TEXT NOT NULL,\\n            image_path TEXT,\\n            source TEXT,\\n            is_favorite INTEGER DEFAULT 0,\\n            sync_status TEXT DEFAULT 'synced',\\n            created_at INTEGER NOT NULL,\\n            updated_at INTEGER NOT NULL\\n          );\\n        \");\n        tx.executeSql(\"\\n          CREATE TABLE IF NOT EXISTS settings (\\n            key TEXT PRIMARY KEY,\\n            value TEXT NOT NULL,\\n            updated_at INTEGER NOT NULL\\n          );\\n        \");\n        tx.executeSql(\"\\n          CREATE TABLE IF NOT EXISTS sync_queue (\\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\\n            table_name TEXT NOT NULL,\\n            record_id TEXT NOT NULL,\\n            operation TEXT NOT NULL,\\n            data TEXT,\\n            attempts INTEGER DEFAULT 0,\\n            status TEXT DEFAULT 'pending',\\n            created_at INTEGER NOT NULL,\\n            updated_at INTEGER NOT NULL\\n          );\\n        \");\n        tx.executeSql(\"\\n          CREATE TABLE IF NOT EXISTS disease_categories (\\n            id TEXT PRIMARY KEY,\\n            name TEXT NOT NULL,\\n            description TEXT,\\n            updated_at INTEGER NOT NULL\\n          );\\n        \");\n        tx.executeSql(\"\\n          CREATE TABLE IF NOT EXISTS crop_types (\\n            id TEXT PRIMARY KEY,\\n            name TEXT NOT NULL,\\n            description TEXT,\\n            common_diseases TEXT,\\n            updated_at INTEGER NOT NULL\\n          );\\n        \");\n        tx.executeSql(\"CREATE INDEX IF NOT EXISTS idx_disease_detections_user_id ON disease_detections(user_id);\");\n        tx.executeSql(\"CREATE INDEX IF NOT EXISTS idx_messages_group_id ON messages(group_id);\");\n        tx.executeSql(\"CREATE INDEX IF NOT EXISTS idx_messages_created_at ON messages(created_at);\");\n        tx.executeSql(\"CREATE INDEX IF NOT EXISTS idx_group_members_group_id ON group_members(group_id);\");\n        tx.executeSql(\"CREATE INDEX IF NOT EXISTS idx_group_members_user_id ON group_members(user_id);\");\n        tx.executeSql(\"CREATE INDEX IF NOT EXISTS idx_sync_queue_status ON sync_queue(status);\");\n        tx.executeSql(\"CREATE INDEX IF NOT EXISTS idx_disease_detections_sync_status ON disease_detections(sync_status);\");\n        tx.executeSql(\"INSERT OR IGNORE INTO settings (key, value, updated_at) VALUES (?, ?, ?)\", [\"language\", \"en\", Date.now()]);\n        tx.executeSql(\"INSERT OR IGNORE INTO settings (key, value, updated_at) VALUES (?, ?, ?)\", [\"sync_interval\", \"3600000\", Date.now()]);\n        tx.executeSql(\"INSERT OR IGNORE INTO settings (key, value, updated_at) VALUES (?, ?, ?)\", [\"notifications_enabled\", \"true\", Date.now()]);\n        tx.executeSql(\"INSERT OR IGNORE INTO settings (key, value, updated_at) VALUES (?, ?, ?)\", [\"last_sync\", \"0\", Date.now()]);\n        tx.executeSql(\"INSERT OR IGNORE INTO settings (key, value, updated_at) VALUES (?, ?, ?)\", [\"data_saver_mode\", \"false\", Date.now()]);\n      }, function (error) {\n        console.error('Error setting up database:', error);\n        reject(error);\n      }, function () {\n        return resolve();\n      });\n    });\n  });\n  return function setupDatabase(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["setupDatabase","_ref","_asyncToGenerator","db","Promise","resolve","reject","transaction","tx","executeSql","Date","now","error","console","_x","apply","arguments"],"sources":["C:/Users/eacha/OneDrive/Desktop/SMART FARMER/FRONTEND/src/db/setup.js"],"sourcesContent":["/**\r\n * Database Setup\r\n * \r\n * Initializes SQLite database tables and initial data\r\n */\r\n\r\n// Create all necessary tables in the database\r\nexport const setupDatabase = async (db) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.transaction(\r\n      tx => {\r\n        // Users table\r\n        tx.executeSql(`\r\n          CREATE TABLE IF NOT EXISTS users (\r\n            id TEXT PRIMARY KEY,\r\n            name TEXT NOT NULL,\r\n            email TEXT,\r\n            phone TEXT,\r\n            profile_image TEXT,\r\n            role TEXT NOT NULL,\r\n            last_sync INTEGER,\r\n            created_at INTEGER NOT NULL,\r\n            updated_at INTEGER NOT NULL\r\n          );\r\n        `);\r\n\r\n        // Disease detections table\r\n        tx.executeSql(`\r\n          CREATE TABLE IF NOT EXISTS disease_detections (\r\n            id TEXT PRIMARY KEY,\r\n            user_id TEXT NOT NULL,\r\n            crop_name TEXT NOT NULL,\r\n            image_path TEXT NOT NULL,\r\n            description TEXT,\r\n            confidence REAL,\r\n            advice TEXT,\r\n            treatment TEXT,\r\n            prevention TEXT,\r\n            location TEXT,\r\n            sync_status TEXT DEFAULT 'pending',\r\n            created_at INTEGER NOT NULL,\r\n            updated_at INTEGER NOT NULL,\r\n            FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE\r\n          );\r\n        `);\r\n\r\n        // Groups table\r\n        tx.executeSql(`\r\n          CREATE TABLE IF NOT EXISTS groups (\r\n            id TEXT PRIMARY KEY,\r\n            name TEXT NOT NULL,\r\n            description TEXT,\r\n            image_path TEXT,\r\n            join_code TEXT,\r\n            member_count INTEGER DEFAULT 0,\r\n            created_by TEXT,\r\n            is_public INTEGER DEFAULT 1,\r\n            sync_status TEXT DEFAULT 'pending',\r\n            created_at INTEGER NOT NULL,\r\n            updated_at INTEGER NOT NULL,\r\n            FOREIGN KEY (created_by) REFERENCES users (id) ON DELETE SET NULL\r\n          );\r\n        `);\r\n\r\n        // Group members table\r\n        tx.executeSql(`\r\n          CREATE TABLE IF NOT EXISTS group_members (\r\n            id TEXT PRIMARY KEY,\r\n            group_id TEXT NOT NULL,\r\n            user_id TEXT NOT NULL,\r\n            role TEXT DEFAULT 'member',\r\n            joined_at INTEGER NOT NULL,\r\n            sync_status TEXT DEFAULT 'pending',\r\n            FOREIGN KEY (group_id) REFERENCES groups (id) ON DELETE CASCADE,\r\n            FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,\r\n            UNIQUE (group_id, user_id)\r\n          );\r\n        `);\r\n\r\n        // Messages table\r\n        tx.executeSql(`\r\n          CREATE TABLE IF NOT EXISTS messages (\r\n            id TEXT PRIMARY KEY,\r\n            group_id TEXT NOT NULL,\r\n            user_id TEXT NOT NULL,\r\n            content TEXT NOT NULL,\r\n            has_attachment INTEGER DEFAULT 0,\r\n            attachment_type TEXT,\r\n            attachment_url TEXT,\r\n            is_read INTEGER DEFAULT 0,\r\n            sync_status TEXT DEFAULT 'pending',\r\n            created_at INTEGER NOT NULL,\r\n            updated_at INTEGER NOT NULL,\r\n            FOREIGN KEY (group_id) REFERENCES groups (id) ON DELETE CASCADE,\r\n            FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE\r\n          );\r\n        `);\r\n\r\n        // Advisory content table\r\n        tx.executeSql(`\r\n          CREATE TABLE IF NOT EXISTS advisory_content (\r\n            id TEXT PRIMARY KEY,\r\n            title TEXT NOT NULL,\r\n            content TEXT NOT NULL,\r\n            category TEXT NOT NULL,\r\n            image_path TEXT,\r\n            source TEXT,\r\n            is_favorite INTEGER DEFAULT 0,\r\n            sync_status TEXT DEFAULT 'synced',\r\n            created_at INTEGER NOT NULL,\r\n            updated_at INTEGER NOT NULL\r\n          );\r\n        `);\r\n\r\n        // Settings table\r\n        tx.executeSql(`\r\n          CREATE TABLE IF NOT EXISTS settings (\r\n            key TEXT PRIMARY KEY,\r\n            value TEXT NOT NULL,\r\n            updated_at INTEGER NOT NULL\r\n          );\r\n        `);\r\n\r\n        // Sync queue table\r\n        tx.executeSql(`\r\n          CREATE TABLE IF NOT EXISTS sync_queue (\r\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n            table_name TEXT NOT NULL,\r\n            record_id TEXT NOT NULL,\r\n            operation TEXT NOT NULL,\r\n            data TEXT,\r\n            attempts INTEGER DEFAULT 0,\r\n            status TEXT DEFAULT 'pending',\r\n            created_at INTEGER NOT NULL,\r\n            updated_at INTEGER NOT NULL\r\n          );\r\n        `);\r\n\r\n        // Disease categories reference table\r\n        tx.executeSql(`\r\n          CREATE TABLE IF NOT EXISTS disease_categories (\r\n            id TEXT PRIMARY KEY,\r\n            name TEXT NOT NULL,\r\n            description TEXT,\r\n            updated_at INTEGER NOT NULL\r\n          );\r\n        `);\r\n\r\n        // Crop types reference table\r\n        tx.executeSql(`\r\n          CREATE TABLE IF NOT EXISTS crop_types (\r\n            id TEXT PRIMARY KEY,\r\n            name TEXT NOT NULL,\r\n            description TEXT,\r\n            common_diseases TEXT,\r\n            updated_at INTEGER NOT NULL\r\n          );\r\n        `);\r\n\r\n        // Create indexes for better performance\r\n        tx.executeSql(\"CREATE INDEX IF NOT EXISTS idx_disease_detections_user_id ON disease_detections(user_id);\");\r\n        tx.executeSql(\"CREATE INDEX IF NOT EXISTS idx_messages_group_id ON messages(group_id);\");\r\n        tx.executeSql(\"CREATE INDEX IF NOT EXISTS idx_messages_created_at ON messages(created_at);\");\r\n        tx.executeSql(\"CREATE INDEX IF NOT EXISTS idx_group_members_group_id ON group_members(group_id);\");\r\n        tx.executeSql(\"CREATE INDEX IF NOT EXISTS idx_group_members_user_id ON group_members(user_id);\");\r\n        tx.executeSql(\"CREATE INDEX IF NOT EXISTS idx_sync_queue_status ON sync_queue(status);\");\r\n        tx.executeSql(\"CREATE INDEX IF NOT EXISTS idx_disease_detections_sync_status ON disease_detections(sync_status);\");\r\n\r\n        // Insert default settings\r\n        tx.executeSql(\r\n          \"INSERT OR IGNORE INTO settings (key, value, updated_at) VALUES (?, ?, ?)\",\r\n          [\"language\", \"en\", Date.now()]\r\n        );\r\n        tx.executeSql(\r\n          \"INSERT OR IGNORE INTO settings (key, value, updated_at) VALUES (?, ?, ?)\",\r\n          [\"sync_interval\", \"3600000\", Date.now()]\r\n        );\r\n        tx.executeSql(\r\n          \"INSERT OR IGNORE INTO settings (key, value, updated_at) VALUES (?, ?, ?)\",\r\n          [\"notifications_enabled\", \"true\", Date.now()]\r\n        );\r\n        tx.executeSql(\r\n          \"INSERT OR IGNORE INTO settings (key, value, updated_at) VALUES (?, ?, ?)\",\r\n          [\"last_sync\", \"0\", Date.now()]\r\n        );\r\n        tx.executeSql(\r\n          \"INSERT OR IGNORE INTO settings (key, value, updated_at) VALUES (?, ?, ?)\",\r\n          [\"data_saver_mode\", \"false\", Date.now()]\r\n        );\r\n      },\r\n      error => {\r\n        console.error('Error setting up database:', error);\r\n        reject(error);\r\n      },\r\n      () => resolve()\r\n    );\r\n  });\r\n};"],"mappings":";AAOA,OAAO,IAAMA,aAAa;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAOC,EAAE,EAAK;IACzC,OAAO,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;MACtCH,EAAE,CAACI,WAAW,CACZ,UAAAC,EAAE,EAAI;QAEJA,EAAE,CAACC,UAAU,mXAYZ,CAAC;QAGFD,EAAE,CAACC,UAAU,umBAiBZ,CAAC;QAGFD,EAAE,CAACC,UAAU,gjBAeZ,CAAC;QAGFD,EAAE,CAACC,UAAU,igBAYZ,CAAC;QAGFD,EAAE,CAACC,UAAU,qpBAgBZ,CAAC;QAGFD,EAAE,CAACC,UAAU,wcAaZ,CAAC;QAGFD,EAAE,CAACC,UAAU,0LAMZ,CAAC;QAGFD,EAAE,CAACC,UAAU,obAYZ,CAAC;QAGFD,EAAE,CAACC,UAAU,iOAOZ,CAAC;QAGFD,EAAE,CAACC,UAAU,4PAQZ,CAAC;QAGFD,EAAE,CAACC,UAAU,CAAC,2FAA2F,CAAC;QAC1GD,EAAE,CAACC,UAAU,CAAC,yEAAyE,CAAC;QACxFD,EAAE,CAACC,UAAU,CAAC,6EAA6E,CAAC;QAC5FD,EAAE,CAACC,UAAU,CAAC,mFAAmF,CAAC;QAClGD,EAAE,CAACC,UAAU,CAAC,iFAAiF,CAAC;QAChGD,EAAE,CAACC,UAAU,CAAC,yEAAyE,CAAC;QACxFD,EAAE,CAACC,UAAU,CAAC,mGAAmG,CAAC;QAGlHD,EAAE,CAACC,UAAU,CACX,0EAA0E,EAC1E,CAAC,UAAU,EAAE,IAAI,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CAC/B,CAAC;QACDH,EAAE,CAACC,UAAU,CACX,0EAA0E,EAC1E,CAAC,eAAe,EAAE,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CACzC,CAAC;QACDH,EAAE,CAACC,UAAU,CACX,0EAA0E,EAC1E,CAAC,uBAAuB,EAAE,MAAM,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CAC9C,CAAC;QACDH,EAAE,CAACC,UAAU,CACX,0EAA0E,EAC1E,CAAC,WAAW,EAAE,GAAG,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CAC/B,CAAC;QACDH,EAAE,CAACC,UAAU,CACX,0EAA0E,EAC1E,CAAC,iBAAiB,EAAE,OAAO,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CACzC,CAAC;MACH,CAAC,EACD,UAAAC,KAAK,EAAI;QACPC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClDN,MAAM,CAACM,KAAK,CAAC;MACf,CAAC,EACD;QAAA,OAAMP,OAAO,CAAC,CAAC;MAAA,CACjB,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EAAA,gBA9LYL,aAAaA,CAAAc,EAAA;IAAA,OAAAb,IAAA,CAAAc,KAAA,OAAAC,SAAA;EAAA;AAAA,GA8LzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}