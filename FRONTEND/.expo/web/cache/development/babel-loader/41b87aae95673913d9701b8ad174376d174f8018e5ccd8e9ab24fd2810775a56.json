{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nvar migration_001 = {\n  version: 1,\n  description: 'Add severity_level to disease_detections',\n  up: function up(tx) {\n    tx.executeSql('ALTER TABLE disease_detections ADD COLUMN severity_level TEXT;');\n  }\n};\nvar migration_002 = {\n  version: 2,\n  description: 'Add notification_preferences table',\n  up: function up(tx) {\n    tx.executeSql(\"\\n      CREATE TABLE IF NOT EXISTS notification_preferences (\\n        user_id TEXT PRIMARY KEY,\\n        disease_alerts BOOLEAN DEFAULT 1,\\n        group_messages BOOLEAN DEFAULT 1,\\n        advisory_updates BOOLEAN DEFAULT 1,\\n        quiet_hours_start INTEGER,\\n        quiet_hours_end INTEGER,\\n        updated_at INTEGER NOT NULL,\\n        FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE\\n      );\\n    \");\n  }\n};\nvar migrations = [migration_001, migration_002];\nexport var migrationManager = {\n  getCurrentVersion: function getCurrentVersion(db) {\n    return new Promise(function (resolve, reject) {\n      db.transaction(function (tx) {\n        tx.executeSql(\"SELECT name FROM sqlite_master WHERE type='table' AND name='migrations';\", [], function (_, _ref) {\n          var rows = _ref.rows;\n          if (rows.length === 0) {\n            tx.executeSql(\"CREATE TABLE migrations (\\n                  version INTEGER PRIMARY KEY,\\n                  applied_at INTEGER NOT NULL\\n                );\", [], function () {\n              return resolve(0);\n            }, function (_, error) {\n              return reject(error);\n            });\n          } else {\n            tx.executeSql('SELECT MAX(version) as version FROM migrations;', [], function (_, _ref2) {\n              var rows = _ref2.rows;\n              var version = rows.item(0).version || 0;\n              resolve(version);\n            }, function (_, error) {\n              return reject(error);\n            });\n          }\n        }, function (_, error) {\n          return reject(error);\n        });\n      });\n    });\n  },\n  recordMigration: function recordMigration(db, version) {\n    return new Promise(function (resolve, reject) {\n      db.transaction(function (tx) {\n        tx.executeSql('INSERT INTO migrations (version, applied_at) VALUES (?, ?);', [version, Date.now()], function (_, result) {\n          return resolve(result);\n        }, function (_, error) {\n          return reject(error);\n        });\n      });\n    });\n  },\n  runMigrations: function () {\n    var _runMigrations = _asyncToGenerator(function* (db) {\n      try {\n        var currentVersion = yield migrationManager.getCurrentVersion(db);\n        var pendingMigrations = migrations.filter(function (migration) {\n          return migration.version > currentVersion;\n        });\n        if (pendingMigrations.length === 0) {\n          console.log('Database is up to date, no migrations needed');\n          return;\n        }\n        console.log(\"Applying \" + pendingMigrations.length + \" migrations...\");\n        var _loop = function* _loop(migration) {\n          console.log(\"Applying migration \" + migration.version + \": \" + migration.description);\n          yield new Promise(function (resolve, reject) {\n            db.transaction(function (tx) {\n              migration.up(tx);\n            }, function (error) {\n              console.error(\"Migration \" + migration.version + \" failed:\", error);\n              reject(error);\n            }, _asyncToGenerator(function* () {\n              yield migrationManager.recordMigration(db, migration.version);\n              console.log(\"Migration \" + migration.version + \" applied successfully\");\n              resolve();\n            }));\n          });\n        };\n        for (var migration of pendingMigrations) {\n          yield* _loop(migration);\n        }\n        console.log('All migrations applied successfully');\n      } catch (error) {\n        console.error('Error running migrations:', error);\n        throw error;\n      }\n    });\n    function runMigrations(_x) {\n      return _runMigrations.apply(this, arguments);\n    }\n    return runMigrations;\n  }()\n};","map":{"version":3,"names":["migration_001","version","description","up","tx","executeSql","migration_002","migrations","migrationManager","getCurrentVersion","db","Promise","resolve","reject","transaction","_","_ref","rows","length","error","_ref2","item","recordMigration","Date","now","result","runMigrations","_runMigrations","_asyncToGenerator","currentVersion","pendingMigrations","filter","migration","console","log","_loop","_x","apply","arguments"],"sources":["C:/Users/eacha/OneDrive/Desktop/SMART FARMER/FRONTEND/src/db/migrations.js"],"sourcesContent":["/**\r\n * Database Migrations Manager\r\n * \r\n * Handles database schema migrations as the app evolves\r\n */\r\n\r\n// Example migration: Add a new field to disease_detections\r\nconst migration_001 = {\r\n  version: 1,\r\n  description: 'Add severity_level to disease_detections',\r\n  up: (tx) => {\r\n    tx.executeSql(\r\n      'ALTER TABLE disease_detections ADD COLUMN severity_level TEXT;'\r\n    );\r\n  }\r\n};\r\n\r\n// Example migration: Create a new table for notification preferences\r\nconst migration_002 = {\r\n  version: 2,\r\n  description: 'Add notification_preferences table',\r\n  up: (tx) => {\r\n    tx.executeSql(`\r\n      CREATE TABLE IF NOT EXISTS notification_preferences (\r\n        user_id TEXT PRIMARY KEY,\r\n        disease_alerts BOOLEAN DEFAULT 1,\r\n        group_messages BOOLEAN DEFAULT 1,\r\n        advisory_updates BOOLEAN DEFAULT 1,\r\n        quiet_hours_start INTEGER,\r\n        quiet_hours_end INTEGER,\r\n        updated_at INTEGER NOT NULL,\r\n        FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE\r\n      );\r\n    `);\r\n  }\r\n};\r\n\r\n// All migrations in order\r\nconst migrations = [\r\n  migration_001,\r\n  migration_002,\r\n  // Add new migrations here as the app evolves\r\n];\r\n\r\n// Migrations manager\r\nexport const migrationManager = {\r\n  // Get current database version\r\n  getCurrentVersion: (db) => {\r\n    return new Promise((resolve, reject) => {\r\n      // First check if the migrations table exists\r\n      db.transaction(tx => {\r\n        tx.executeSql(\r\n          `SELECT name FROM sqlite_master WHERE type='table' AND name='migrations';`,\r\n          [],\r\n          (_, { rows }) => {\r\n            if (rows.length === 0) {\r\n              // Migrations table doesn't exist yet, create it\r\n              tx.executeSql(\r\n                `CREATE TABLE migrations (\r\n                  version INTEGER PRIMARY KEY,\r\n                  applied_at INTEGER NOT NULL\r\n                );`,\r\n                [],\r\n                () => resolve(0), // No migrations applied yet\r\n                (_, error) => reject(error)\r\n              );\r\n            } else {\r\n              // Get the highest migration version\r\n              tx.executeSql(\r\n                'SELECT MAX(version) as version FROM migrations;',\r\n                [],\r\n                (_, { rows }) => {\r\n                  const version = rows.item(0).version || 0;\r\n                  resolve(version);\r\n                },\r\n                (_, error) => reject(error)\r\n              );\r\n            }\r\n          },\r\n          (_, error) => reject(error)\r\n        );\r\n      });\r\n    });\r\n  },\r\n\r\n  // Record a migration as applied\r\n  recordMigration: (db, version) => {\r\n    return new Promise((resolve, reject) => {\r\n      db.transaction(tx => {\r\n        tx.executeSql(\r\n          'INSERT INTO migrations (version, applied_at) VALUES (?, ?);',\r\n          [version, Date.now()],\r\n          (_, result) => resolve(result),\r\n          (_, error) => reject(error)\r\n        );\r\n      });\r\n    });\r\n  },\r\n\r\n  // Run all pending migrations\r\n  runMigrations: async (db) => {\r\n    try {\r\n      const currentVersion = await migrationManager.getCurrentVersion(db);\r\n      \r\n      // Find migrations that need to be applied\r\n      const pendingMigrations = migrations.filter(\r\n        migration => migration.version > currentVersion\r\n      );\r\n      \r\n      if (pendingMigrations.length === 0) {\r\n        console.log('Database is up to date, no migrations needed');\r\n        return;\r\n      }\r\n      \r\n      console.log(`Applying ${pendingMigrations.length} migrations...`);\r\n      \r\n      // Apply each migration in a transaction\r\n      for (const migration of pendingMigrations) {\r\n        console.log(`Applying migration ${migration.version}: ${migration.description}`);\r\n        \r\n        await new Promise((resolve, reject) => {\r\n          db.transaction(\r\n            tx => {\r\n              migration.up(tx);\r\n            },\r\n            error => {\r\n              console.error(`Migration ${migration.version} failed:`, error);\r\n              reject(error);\r\n            },\r\n            async () => {\r\n              // Record successful migration\r\n              await migrationManager.recordMigration(db, migration.version);\r\n              console.log(`Migration ${migration.version} applied successfully`);\r\n              resolve();\r\n            }\r\n          );\r\n        });\r\n      }\r\n      \r\n      console.log('All migrations applied successfully');\r\n    } catch (error) {\r\n      console.error('Error running migrations:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}