{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport jwtDecode from 'jwt-decode';\nimport axios from 'axios';\nimport { useDatabase } from \"./DatabaseContext\";\nimport { api } from \"../services/api\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar AuthContext = createContext({\n  user: null,\n  isAuthenticated: false,\n  isLoading: true,\n  login: function () {\n    var _login = _asyncToGenerator(function* () {});\n    function login() {\n      return _login.apply(this, arguments);\n    }\n    return login;\n  }(),\n  register: function () {\n    var _register = _asyncToGenerator(function* () {});\n    function register() {\n      return _register.apply(this, arguments);\n    }\n    return register;\n  }(),\n  logout: function () {\n    var _logout = _asyncToGenerator(function* () {});\n    function logout() {\n      return _logout.apply(this, arguments);\n    }\n    return logout;\n  }(),\n  updateUserProfile: function () {\n    var _updateUserProfile = _asyncToGenerator(function* () {});\n    function updateUserProfile() {\n      return _updateUserProfile.apply(this, arguments);\n    }\n    return updateUserProfile;\n  }(),\n  checkAuth: function () {\n    var _checkAuth = _asyncToGenerator(function* () {});\n    function checkAuth() {\n      return _checkAuth.apply(this, arguments);\n    }\n    return checkAuth;\n  }(),\n  resetPassword: function () {\n    var _resetPassword = _asyncToGenerator(function* () {});\n    function resetPassword() {\n      return _resetPassword.apply(this, arguments);\n    }\n    return resetPassword;\n  }(),\n  verifyCode: function () {\n    var _verifyCode = _asyncToGenerator(function* () {});\n    function verifyCode() {\n      return _verifyCode.apply(this, arguments);\n    }\n    return verifyCode;\n  }()\n});\nexport var useAuth = function useAuth() {\n  return useContext(AuthContext);\n};\nexport var AuthProvider = function AuthProvider(_ref) {\n  var children = _ref.children;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    user = _useState2[0],\n    setUser = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isAuthenticated = _useState4[0],\n    setIsAuthenticated = _useState4[1];\n  var _useState5 = useState(true),\n    _useState6 = _slicedToArray(_useState5, 2),\n    isLoading = _useState6[0],\n    setIsLoading = _useState6[1];\n  var _useState7 = useState(null),\n    _useState8 = _slicedToArray(_useState7, 2),\n    authToken = _useState8[0],\n    setAuthToken = _useState8[1];\n  var _useDatabase = useDatabase(),\n    executeQuery = _useDatabase.executeQuery,\n    isDbReady = _useDatabase.isDbReady;\n  useEffect(function () {\n    var checkAuthentication = function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        try {\n          var token = yield AsyncStorage.getItem('@auth_token');\n          if (token) {\n            var decodedToken = jwtDecode(token);\n            var currentTime = Date.now() / 1000;\n            if (decodedToken.exp && decodedToken.exp > currentTime) {\n              setAuthToken(token);\n              yield loadUser(token, decodedToken);\n              return;\n            }\n          }\n          setIsAuthenticated(false);\n          setUser(null);\n        } catch (error) {\n          console.error('Error checking authentication:', error);\n          setIsAuthenticated(false);\n          setUser(null);\n        } finally {\n          setIsLoading(false);\n        }\n      });\n      return function checkAuthentication() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    checkAuthentication();\n  }, []);\n  useEffect(function () {\n    if (authToken) {\n      api.defaults.headers.common['Authorization'] = \"Bearer \" + authToken;\n    } else {\n      delete api.defaults.headers.common['Authorization'];\n    }\n  }, [authToken]);\n  var loadUser = function () {\n    var _ref3 = _asyncToGenerator(function* (token) {\n      var decodedToken = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      try {\n        if (!decodedToken) {\n          decodedToken = jwtDecode(token);\n        }\n        var userData = {\n          id: decodedToken.sub || decodedToken.id,\n          name: decodedToken.name,\n          email: decodedToken.email,\n          phone: decodedToken.phone,\n          role: decodedToken.role || 'farmer'\n        };\n        setUser(userData);\n        setIsAuthenticated(true);\n        if (isDbReady) {\n          var now = Date.now();\n          try {\n            var _existingUserResult$r;\n            var existingUserResult = yield executeQuery('SELECT id FROM users WHERE id = ?;', [userData.id]);\n            if ((existingUserResult == null ? void 0 : (_existingUserResult$r = existingUserResult.rows) == null ? void 0 : _existingUserResult$r.length) > 0) {\n              yield executeQuery('UPDATE users SET name = ?, email = ?, phone = ?, role = ?, updated_at = ? WHERE id = ?;', [userData.name, userData.email, userData.phone, userData.role, now, userData.id]);\n            } else {\n              yield executeQuery('INSERT INTO users (id, name, email, phone, profile_image, role, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?);', [userData.id, userData.name, userData.email, userData.phone, null, userData.role, now, now]);\n            }\n          } catch (dbError) {\n            console.error('Error saving user to database:', dbError);\n          }\n        }\n        return userData;\n      } catch (error) {\n        console.error('Error loading user:', error);\n        setIsAuthenticated(false);\n        setUser(null);\n        return null;\n      } finally {\n        setIsLoading(false);\n      }\n    });\n    return function loadUser(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var login = function () {\n    var _ref4 = _asyncToGenerator(function* (email, password) {\n      setIsLoading(true);\n      try {\n        var response = yield api.post('/auth/login', {\n          email: email,\n          password: password\n        });\n        var token = response.data.token;\n        yield AsyncStorage.setItem('@auth_token', token);\n        setAuthToken(token);\n        var userData = yield loadUser(token);\n        return {\n          success: true,\n          user: userData\n        };\n      } catch (error) {\n        var _error$response, _error$response$data;\n        console.error('Login error:', error);\n        return {\n          success: false,\n          error: ((_error$response = error.response) == null ? void 0 : (_error$response$data = _error$response.data) == null ? void 0 : _error$response$data.message) || 'Login failed'\n        };\n      } finally {\n        setIsLoading(false);\n      }\n    });\n    return function login(_x2, _x3) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  var register = function () {\n    var _ref5 = _asyncToGenerator(function* (userData) {\n      setIsLoading(true);\n      try {\n        var response = yield api.post('/auth/register', userData);\n        var token = response.data.token;\n        yield AsyncStorage.setItem('@auth_token', token);\n        setAuthToken(token);\n        var _user = yield loadUser(token);\n        return {\n          success: true,\n          user: _user\n        };\n      } catch (error) {\n        var _error$response2, _error$response2$data;\n        console.error('Registration error:', error);\n        return {\n          success: false,\n          error: ((_error$response2 = error.response) == null ? void 0 : (_error$response2$data = _error$response2.data) == null ? void 0 : _error$response2$data.message) || 'Registration failed'\n        };\n      } finally {\n        setIsLoading(false);\n      }\n    });\n    return function register(_x4) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n  var logout = function () {\n    var _ref6 = _asyncToGenerator(function* () {\n      try {\n        yield AsyncStorage.removeItem('@auth_token');\n        setAuthToken(null);\n        setUser(null);\n        setIsAuthenticated(false);\n        return {\n          success: true\n        };\n      } catch (error) {\n        console.error('Logout error:', error);\n        return {\n          success: false,\n          error: 'Logout failed'\n        };\n      }\n    });\n    return function logout() {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n  var updateUserProfile = function () {\n    var _ref7 = _asyncToGenerator(function* (profileData) {\n      if (!isAuthenticated || !user) {\n        return {\n          success: false,\n          error: 'Not authenticated'\n        };\n      }\n      setIsLoading(true);\n      try {\n        var response = yield api.put('/profile', profileData);\n        var updatedUser = _objectSpread(_objectSpread({}, user), response.data.user);\n        setUser(updatedUser);\n        if (isDbReady) {\n          yield executeQuery('UPDATE users SET name = ?, email = ?, phone = ?, profile_image = ?, updated_at = ? WHERE id = ?;', [updatedUser.name, updatedUser.email, updatedUser.phone, updatedUser.profile_image, Date.now(), user.id]);\n        }\n        return {\n          success: true,\n          user: updatedUser\n        };\n      } catch (error) {\n        var _error$response3, _error$response3$data;\n        console.error('Update profile error:', error);\n        return {\n          success: false,\n          error: ((_error$response3 = error.response) == null ? void 0 : (_error$response3$data = _error$response3.data) == null ? void 0 : _error$response3$data.message) || 'Profile update failed'\n        };\n      } finally {\n        setIsLoading(false);\n      }\n    });\n    return function updateUserProfile(_x5) {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n  var checkAuth = function () {\n    var _ref8 = _asyncToGenerator(function* () {\n      if (!authToken) {\n        return false;\n      }\n      try {\n        var response = yield api.get('/auth/verify');\n        return response.data.valid;\n      } catch (error) {\n        console.error('Auth check error:', error);\n        logout();\n        return false;\n      }\n    });\n    return function checkAuth() {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n  var resetPassword = function () {\n    var _ref9 = _asyncToGenerator(function* (email) {\n      try {\n        yield api.post('/auth/reset-password', {\n          email: email\n        });\n        return {\n          success: true\n        };\n      } catch (error) {\n        var _error$response4, _error$response4$data;\n        console.error('Reset password error:', error);\n        return {\n          success: false,\n          error: ((_error$response4 = error.response) == null ? void 0 : (_error$response4$data = _error$response4.data) == null ? void 0 : _error$response4$data.message) || 'Password reset failed'\n        };\n      }\n    });\n    return function resetPassword(_x6) {\n      return _ref9.apply(this, arguments);\n    };\n  }();\n  var verifyCode = function () {\n    var _ref0 = _asyncToGenerator(function* (phone, code) {\n      try {\n        var response = yield api.post('/auth/verify-code', {\n          phone: phone,\n          code: code\n        });\n        if (response.data.token) {\n          yield AsyncStorage.setItem('@auth_token', response.data.token);\n          setAuthToken(response.data.token);\n          var userData = yield loadUser(response.data.token);\n          return {\n            success: true,\n            user: userData\n          };\n        }\n        return {\n          success: true\n        };\n      } catch (error) {\n        var _error$response5, _error$response5$data;\n        console.error('Code verification error:', error);\n        return {\n          success: false,\n          error: ((_error$response5 = error.response) == null ? void 0 : (_error$response5$data = _error$response5.data) == null ? void 0 : _error$response5$data.message) || 'Verification failed'\n        };\n      }\n    });\n    return function verifyCode(_x7, _x8) {\n      return _ref0.apply(this, arguments);\n    };\n  }();\n  return _jsx(AuthContext.Provider, {\n    value: {\n      user: user,\n      isAuthenticated: isAuthenticated,\n      isLoading: isLoading,\n      login: login,\n      register: register,\n      logout: logout,\n      updateUserProfile: updateUserProfile,\n      checkAuth: checkAuth,\n      resetPassword: resetPassword,\n      verifyCode: verifyCode\n    },\n    children: children\n  });\n};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","AsyncStorage","jwtDecode","axios","useDatabase","api","jsx","_jsx","AuthContext","user","isAuthenticated","isLoading","login","_login","_asyncToGenerator","apply","arguments","register","_register","logout","_logout","updateUserProfile","_updateUserProfile","checkAuth","_checkAuth","resetPassword","_resetPassword","verifyCode","_verifyCode","useAuth","AuthProvider","_ref","children","_useState","_useState2","_slicedToArray","setUser","_useState3","_useState4","setIsAuthenticated","_useState5","_useState6","setIsLoading","_useState7","_useState8","authToken","setAuthToken","_useDatabase","executeQuery","isDbReady","checkAuthentication","_ref2","token","getItem","decodedToken","currentTime","Date","now","exp","loadUser","error","console","defaults","headers","common","_ref3","length","undefined","userData","id","sub","name","email","phone","role","_existingUserResult$r","existingUserResult","rows","dbError","_x","_ref4","password","response","post","data","setItem","success","_error$response","_error$response$data","message","_x2","_x3","_ref5","_error$response2","_error$response2$data","_x4","_ref6","removeItem","_ref7","profileData","put","updatedUser","_objectSpread","profile_image","_error$response3","_error$response3$data","_x5","_ref8","get","valid","_ref9","_error$response4","_error$response4$data","_x6","_ref0","code","_error$response5","_error$response5$data","_x7","_x8","Provider","value"],"sources":["C:/Users/eacha/OneDrive/Desktop/SMART FARMER/FRONTEND/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport jwtDecode from 'jwt-decode';\r\nimport axios from 'axios';\r\nimport { useDatabase } from './DatabaseContext';\r\nimport { api } from '../services/api';\r\n\r\nconst AuthContext = createContext({\r\n  user: null,\r\n  isAuthenticated: false,\r\n  isLoading: true,\r\n  login: async () => {},\r\n  register: async () => {},\r\n  logout: async () => {},\r\n  updateUserProfile: async () => {},\r\n  checkAuth: async () => {},\r\n  resetPassword: async () => {},\r\n  verifyCode: async () => {},\r\n});\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [authToken, setAuthToken] = useState(null);\r\n  const { executeQuery, isDbReady } = useDatabase();\r\n\r\n  // Check if user is authenticated on mount\r\n  useEffect(() => {\r\n    const checkAuthentication = async () => {\r\n      try {\r\n        const token = await AsyncStorage.getItem('@auth_token');\r\n        if (token) {\r\n          const decodedToken = jwtDecode(token);\r\n          const currentTime = Date.now() / 1000;\r\n\r\n          if (decodedToken.exp && decodedToken.exp > currentTime) {\r\n            // Token is valid\r\n            setAuthToken(token);\r\n            await loadUser(token, decodedToken);\r\n            return;\r\n          }\r\n        }\r\n        // No valid token\r\n        setIsAuthenticated(false);\r\n        setUser(null);\r\n      } catch (error) {\r\n        console.error('Error checking authentication:', error);\r\n        setIsAuthenticated(false);\r\n        setUser(null);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    checkAuthentication();\r\n  }, []);\r\n\r\n  // Set auth header when token changes\r\n  useEffect(() => {\r\n    if (authToken) {\r\n      api.defaults.headers.common['Authorization'] = `Bearer ${authToken}`;\r\n    } else {\r\n      delete api.defaults.headers.common['Authorization'];\r\n    }\r\n  }, [authToken]);\r\n\r\n  // Load user data\r\n  const loadUser = async (token, decodedToken = null) => {\r\n    try {\r\n      if (!decodedToken) {\r\n        decodedToken = jwtDecode(token);\r\n      }\r\n\r\n      // In a real app, you might want to fetch fresh user data from the server\r\n      // For now, we'll use the data from the token\r\n      const userData = {\r\n        id: decodedToken.sub || decodedToken.id,\r\n        name: decodedToken.name,\r\n        email: decodedToken.email,\r\n        phone: decodedToken.phone,\r\n        role: decodedToken.role || 'farmer',\r\n      };\r\n\r\n      // Save to state\r\n      setUser(userData);\r\n      setIsAuthenticated(true);\r\n\r\n      // Save to database if connected\r\n      if (isDbReady) {\r\n        const now = Date.now();\r\n        \r\n        try {\r\n          // Check if user exists in local DB\r\n          const existingUserResult = await executeQuery(\r\n            'SELECT id FROM users WHERE id = ?;',\r\n            [userData.id]\r\n          );\r\n          \r\n          if (existingUserResult?.rows?.length > 0) {\r\n            // Update existing user\r\n            await executeQuery(\r\n              'UPDATE users SET name = ?, email = ?, phone = ?, role = ?, updated_at = ? WHERE id = ?;',\r\n              [userData.name, userData.email, userData.phone, userData.role, now, userData.id]\r\n            );\r\n          } else {\r\n            // Insert new user\r\n            await executeQuery(\r\n              'INSERT INTO users (id, name, email, phone, profile_image, role, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?);',\r\n              [userData.id, userData.name, userData.email, userData.phone, null, userData.role, now, now]\r\n            );\r\n          }\r\n        } catch (dbError) {\r\n          console.error('Error saving user to database:', dbError);\r\n        }\r\n      }\r\n\r\n      return userData;\r\n    } catch (error) {\r\n      console.error('Error loading user:', error);\r\n      setIsAuthenticated(false);\r\n      setUser(null);\r\n      return null;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Login with email/password\r\n  const login = async (email, password) => {\r\n    setIsLoading(true);\r\n    try {\r\n      // In a real app, this would make an API request\r\n      const response = await api.post('/auth/login', { email, password });\r\n      \r\n      const { token } = response.data;\r\n      await AsyncStorage.setItem('@auth_token', token);\r\n      setAuthToken(token);\r\n      \r\n      const userData = await loadUser(token);\r\n      return { success: true, user: userData };\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      return { \r\n        success: false, \r\n        error: error.response?.data?.message || 'Login failed'\r\n      };\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Register new user\r\n  const register = async (userData) => {\r\n    setIsLoading(true);\r\n    try {\r\n      // In a real app, this would make an API request\r\n      const response = await api.post('/auth/register', userData);\r\n      \r\n      const { token } = response.data;\r\n      await AsyncStorage.setItem('@auth_token', token);\r\n      setAuthToken(token);\r\n      \r\n      const user = await loadUser(token);\r\n      return { success: true, user };\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      return { \r\n        success: false, \r\n        error: error.response?.data?.message || 'Registration failed'\r\n      };\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Logout user\r\n  const logout = async () => {\r\n    try {\r\n      await AsyncStorage.removeItem('@auth_token');\r\n      setAuthToken(null);\r\n      setUser(null);\r\n      setIsAuthenticated(false);\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n      return { success: false, error: 'Logout failed' };\r\n    }\r\n  };\r\n\r\n  // Update user profile\r\n  const updateUserProfile = async (profileData) => {\r\n    if (!isAuthenticated || !user) {\r\n      return { success: false, error: 'Not authenticated' };\r\n    }\r\n\r\n    setIsLoading(true);\r\n    try {\r\n      // In a real app, this would make an API request\r\n      const response = await api.put('/profile', profileData);\r\n      \r\n      // Update user state\r\n      const updatedUser = { ...user, ...response.data.user };\r\n      setUser(updatedUser);\r\n\r\n      // Update local database\r\n      if (isDbReady) {\r\n        await executeQuery(\r\n          'UPDATE users SET name = ?, email = ?, phone = ?, profile_image = ?, updated_at = ? WHERE id = ?;',\r\n          [\r\n            updatedUser.name, \r\n            updatedUser.email, \r\n            updatedUser.phone, \r\n            updatedUser.profile_image,\r\n            Date.now(),\r\n            user.id\r\n          ]\r\n        );\r\n      }\r\n\r\n      return { success: true, user: updatedUser };\r\n    } catch (error) {\r\n      console.error('Update profile error:', error);\r\n      return { \r\n        success: false, \r\n        error: error.response?.data?.message || 'Profile update failed'\r\n      };\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Check auth status (refresh token, etc.)\r\n  const checkAuth = async () => {\r\n    if (!authToken) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      // In a real app, this would validate the token with the server\r\n      const response = await api.get('/auth/verify');\r\n      return response.data.valid;\r\n    } catch (error) {\r\n      console.error('Auth check error:', error);\r\n      // Token is invalid, logout\r\n      logout();\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Reset password\r\n  const resetPassword = async (email) => {\r\n    try {\r\n      // In a real app, this would make an API request\r\n      await api.post('/auth/reset-password', { email });\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Reset password error:', error);\r\n      return { \r\n        success: false, \r\n        error: error.response?.data?.message || 'Password reset failed'\r\n      };\r\n    }\r\n  };\r\n\r\n  // Verify code (for phone verification, etc.)\r\n  const verifyCode = async (phone, code) => {\r\n    try {\r\n      // In a real app, this would make an API request\r\n      const response = await api.post('/auth/verify-code', { phone, code });\r\n      \r\n      if (response.data.token) {\r\n        await AsyncStorage.setItem('@auth_token', response.data.token);\r\n        setAuthToken(response.data.token);\r\n        const userData = await loadUser(response.data.token);\r\n        return { success: true, user: userData };\r\n      }\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Code verification error:', error);\r\n      return { \r\n        success: false, \r\n        error: error.response?.data?.message || 'Verification failed'\r\n      };\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        user,\r\n        isAuthenticated,\r\n        isLoading,\r\n        login,\r\n        register,\r\n        logout,\r\n        updateUserProfile,\r\n        checkAuth,\r\n        resetPassword,\r\n        verifyCode,\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}