{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport * as Localization from 'expo-localization';\nimport i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport { useDatabase } from \"./DatabaseContext\";\nimport englishTranslation from \"../localization/en.json\";\nimport swahiliTranslation from \"../localization/sw.json\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar resources = {\n  en: {\n    translation: englishTranslation\n  },\n  sw: {\n    translation: swahiliTranslation\n  }\n};\ni18n.use(initReactI18next).init({\n  resources: resources,\n  fallbackLng: 'en',\n  interpolation: {\n    escapeValue: false\n  },\n  compatibilityJSON: 'v3'\n});\nvar LocalizationContext = createContext({\n  locale: 'en',\n  setLocale: function setLocale() {},\n  t: function t(key) {\n    return key;\n  },\n  isRTL: false,\n  locales: []\n});\nexport var useLocalization = function useLocalization() {\n  return useContext(LocalizationContext);\n};\nexport var LocalizationProvider = function LocalizationProvider(_ref) {\n  var children = _ref.children;\n  var _useState = useState('en'),\n    _useState2 = _slicedToArray(_useState, 2),\n    locale = _useState2[0],\n    setLocale = _useState2[1];\n  var _useDatabase = useDatabase(),\n    executeQuery = _useDatabase.executeQuery,\n    isDbReady = _useDatabase.isDbReady;\n  var locales = [{\n    code: 'en',\n    name: 'English',\n    nativeName: 'English'\n  }, {\n    code: 'sw',\n    name: 'Swahili',\n    nativeName: 'Kiswahili'\n  }];\n  useEffect(function () {\n    var loadLocale = function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        try {\n          var savedLocale = yield AsyncStorage.getItem('@user_locale');\n          if (savedLocale) {\n            changeLocale(savedLocale);\n          } else if (isDbReady) {\n            var _result$rows;\n            var result = yield executeQuery(\"SELECT value FROM settings WHERE key = 'language';\");\n            if ((result == null ? void 0 : (_result$rows = result.rows) == null ? void 0 : _result$rows.length) > 0) {\n              changeLocale(result.rows.item(0).value);\n            } else {\n              var deviceLocale = Localization.locale.split('-')[0];\n              var supportedLocale = resources[deviceLocale] ? deviceLocale : 'en';\n              changeLocale(supportedLocale);\n            }\n          }\n        } catch (error) {\n          console.error('Error loading locale:', error);\n          changeLocale('en');\n        }\n      });\n      return function loadLocale() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    loadLocale();\n  }, [isDbReady]);\n  var changeLocale = function () {\n    var _ref3 = _asyncToGenerator(function* (newLocale) {\n      if (resources[newLocale]) {\n        setLocale(newLocale);\n        i18n.changeLanguage(newLocale);\n        try {\n          yield AsyncStorage.setItem('@user_locale', newLocale);\n          if (isDbReady) {\n            executeQuery(\"UPDATE settings SET value = ?, updated_at = ? WHERE key = 'language';\", [newLocale, Date.now()]).catch(function (error) {\n              return console.error('Failed to save locale to database:', error);\n            });\n          }\n        } catch (error) {\n          console.error('Failed to save locale preference:', error);\n        }\n      }\n    });\n    return function changeLocale(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var isRTL = ['ar', 'he', 'ur'].includes(locale);\n  return _jsx(LocalizationContext.Provider, {\n    value: {\n      locale: locale,\n      setLocale: changeLocale,\n      t: i18n.t,\n      isRTL: isRTL,\n      locales: locales\n    },\n    children: children\n  });\n};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","AsyncStorage","Localization","i18n","initReactI18next","useDatabase","englishTranslation","swahiliTranslation","jsx","_jsx","resources","en","translation","sw","use","init","fallbackLng","interpolation","escapeValue","compatibilityJSON","LocalizationContext","locale","setLocale","t","key","isRTL","locales","useLocalization","LocalizationProvider","_ref","children","_useState","_useState2","_slicedToArray","_useDatabase","executeQuery","isDbReady","code","name","nativeName","loadLocale","_ref2","_asyncToGenerator","savedLocale","getItem","changeLocale","_result$rows","result","rows","length","item","value","deviceLocale","split","supportedLocale","error","console","apply","arguments","_ref3","newLocale","changeLanguage","setItem","Date","now","catch","_x","includes","Provider"],"sources":["C:/Users/eacha/OneDrive/Desktop/SMART FARMER/FRONTEND/src/contexts/LocalizationContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport * as Localization from 'expo-localization';\r\nimport i18n from 'i18next';\r\nimport { initReactI18next } from 'react-i18next';\r\nimport { useDatabase } from './DatabaseContext';\r\n\r\n// Import translations\r\nimport englishTranslation from '../localization/en.json';\r\nimport swahiliTranslation from '../localization/sw.json';\r\n\r\n// Available languages\r\nconst resources = {\r\n  en: {\r\n    translation: englishTranslation,\r\n  },\r\n  sw: {\r\n    translation: swahiliTranslation,\r\n  },\r\n};\r\n\r\n// Initialize i18next\r\ni18n\r\n  .use(initReactI18next)\r\n  .init({\r\n    resources,\r\n    fallbackLng: 'en',\r\n    interpolation: {\r\n      escapeValue: false,\r\n    },\r\n    compatibilityJSON: 'v3', // React Native compatibility\r\n  });\r\n\r\nconst LocalizationContext = createContext({\r\n  locale: 'en',\r\n  setLocale: () => {},\r\n  t: (key) => key,\r\n  isRTL: false,\r\n  locales: [],\r\n});\r\n\r\nexport const useLocalization = () => useContext(LocalizationContext);\r\n\r\nexport const LocalizationProvider = ({ children }) => {\r\n  const [locale, setLocale] = useState('en');\r\n  const { executeQuery, isDbReady } = useDatabase();\r\n  \r\n  // Available locales with metadata\r\n  const locales = [\r\n    { code: 'en', name: 'English', nativeName: 'English' },\r\n    { code: 'sw', name: 'Swahili', nativeName: 'Kiswahili' },\r\n  ];\r\n\r\n  // Load saved locale or get device locale\r\n  useEffect(() => {\r\n    const loadLocale = async () => {\r\n      try {\r\n        // Try to get locale from AsyncStorage first\r\n        const savedLocale = await AsyncStorage.getItem('@user_locale');\r\n        \r\n        if (savedLocale) {\r\n          changeLocale(savedLocale);\r\n        } else if (isDbReady) {\r\n          // Try to get locale from database settings\r\n          const result = await executeQuery(\r\n            \"SELECT value FROM settings WHERE key = 'language';\"\r\n          );\r\n          \r\n          if (result?.rows?.length > 0) {\r\n            changeLocale(result.rows.item(0).value);\r\n          } else {\r\n            // Use device locale as fallback, defaulting to 'en' if not supported\r\n            const deviceLocale = Localization.locale.split('-')[0];\r\n            const supportedLocale = resources[deviceLocale] ? deviceLocale : 'en';\r\n            changeLocale(supportedLocale);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading locale:', error);\r\n        // Default to English if there's an error\r\n        changeLocale('en');\r\n      }\r\n    };\r\n    \r\n    loadLocale();\r\n  }, [isDbReady]);\r\n\r\n  // Change language and save preference\r\n  const changeLocale = async (newLocale) => {\r\n    if (resources[newLocale]) {\r\n      setLocale(newLocale);\r\n      i18n.changeLanguage(newLocale);\r\n      \r\n      // Save to AsyncStorage\r\n      try {\r\n        await AsyncStorage.setItem('@user_locale', newLocale);\r\n        \r\n        // Save to database if ready\r\n        if (isDbReady) {\r\n          executeQuery(\r\n            \"UPDATE settings SET value = ?, updated_at = ? WHERE key = 'language';\",\r\n            [newLocale, Date.now()]\r\n          ).catch(error => \r\n            console.error('Failed to save locale to database:', error)\r\n          );\r\n        }\r\n      } catch (error) {\r\n        console.error('Failed to save locale preference:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Check if the current locale is RTL\r\n  const isRTL = ['ar', 'he', 'ur'].includes(locale);\r\n\r\n  return (\r\n    <LocalizationContext.Provider\r\n      value={{\r\n        locale,\r\n        setLocale: changeLocale,\r\n        t: i18n.t,\r\n        isRTL,\r\n        locales,\r\n      }}\r\n    >\r\n      {children}\r\n    </LocalizationContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}